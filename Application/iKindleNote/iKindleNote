#!/bin/bash
gArguNum=$#
gOption=$1
gAllOption="-a -d -e -p"
gFileDir=$2
gProgName=$(basename $0)
gDate=`date "+%Y-%m-%d-%H%M%S-%N"`
gOutputDir="$HOME/ikindleNote/""$gDate"
gNoteTemp="$gOutputDir""/""note.tmp"
gNoteTempNum=""
gNote="$gOutputDir""/""note"
gNoteNum=""
gNoteEmptyLine=""
gNotePieceNum="5"
gLogsDir="$gOutputDir""/""$gDate"".log"

gBooksNum="0"


MORE_LOG=1

function clean_up() {
   echo "clean_up" 
   exit $1
}
#log: only write to logs.
#log -p: print to screen and write to logs.
#log -m: more log write to logs don't print to screen.
#log -e: error output to screen and logs.
function log() {
     if [[ $1 == "-p" ]]; then
       echo "$gProgName: $2" && [[ -f $gLogsDir ]] && echo "$gProgName: $2" >> $gLogsDir
     elif [[ $1 == "-e" ]]; then
       echo "$gProgName:ERROR: ${2:-"Unknown Error!"}" 1>&2 && [[ -f $gLogsDir ]] && echo "$gProgName:ERROR: ${2:-"Unknown Error!"}" >> $gLogsDir
     elif [[ $1 == "-m" && $MORE_LOG == 1 ]]; then
       [[ -f $gLogsDir ]] && echo "$gProgName: $2" >> $gLogsDir
     elif [[ $# == 1 ]]; then
       [[ -f $gLogsDir ]] && echo "$gProgName: $1" >> $gLogsDir
     fi
}

function fail() {
    log -e "$1"
    #log -e "test: log -e"
    #log -p "test: log -p"
    #log -m "test: log -m"
    #log "test: log"
    clean_up 1
}

function usage() {
    echo "usage"
}

function check_argument() {
    flag="0"
    for strOption in $gAllOption
    do
      if [[ $strOption == $gOption ]]; then
        flag="1"
      fi
    done
    #echo "$flag"

    if [[ $gArguNum == "1" && $gOption == "--help" ]]; then
      usage
    elif [[ $gArguNum == "2" && $flag == "1"  ]]; then
      if [[ -f "$gFileDir" ]]; then
        echo "Start..."
      else
        usage
        fail "don't exists file $gFileDir"
      fi
    else
      usage
      fail "bad argument!"
    fi
}

function create_output_dir() {
    if [[  ! -d $gOutputDir ]]; then
      mkdir -p $gOutputDir
    fi
    if [[ ! -f $gLogsDir ]]; then
      touch $gLogsDir
    fi
    if [[ ! -f $gNoteTemp ]]; then
      touch $gNoteTemp
    fi
    cp $gFileDir $gNote
}

function create_books_note() {
   log -m "func:create_books_note"

   for (( i = 1; i < $gNoteTempNum; i=$(( $i + 5 )) )); do
     temp="$i""p"
     title=`sed -n $temp $gNoteTemp`
     title=${title% *}
     titleDir="$gOutputDir""/""$title"
     #echo "$titleDir"
     if [[ ! -f $titleDir ]]; then
       touch $titleDir
       gBooksNum=$(( $gBooksNum + 1 ))
       log "create notes $title, line:$i"
     fi
     temp="$(( $i + 3 ))""p"
     note=`sed -n $temp $gNoteTemp`
     echo "$note" >> $titleDir
   done

   log -m "end:create_books_note"
}

function prepare_analysis_clippings() {
   log -m "func:prepare_analysis_clippings"
   
   sed '/^$/d' $gNote >> $gNoteTemp 
   log -m "delete empty line of note."
   # remove <feff> character
   tmpDir="$HOME""/ikindleNote/.tmp"
   sed '1s/^.//' $gNoteTemp > $tmpDir
   rm -f $gNoteTemp
   mv $tmpDir $gNoteTemp
   log -m "rmove <feff> character"

   gNoteNum=`cat $gNote | wc -l`
   gNoteTempNum=`cat $gNoteTemp | wc -l`
   gNoteEmptyLine=$(( $gNoteNum  - $gNoteTempNum ))
   log -m "gNoteNum:$gNoteNum ,gNoteTempNum:$gNoteTempNum, $gNoteEmptyLine empty lines by delete."
   
   if [[ $(( $gNoteTempNum % $gNotePieceNum )) != "0" ]]; then
     fail "bad note files."
   fi
   log -m "temp notes lines correct."

   create_books_note

   log -m "end:prepare_analysis_clippings"
}

function start_analysis_clippings() {
   log -m "func:start_analysis_clippings" 

   prepare_analysis_clippings 
   
   log -m "***************************"
   log -m "Create $gBooksNum books note, total $(( $gNoteTempNum / $gNotePieceNum )) notes."
   log -m "end:start_analysis_clippings"
}

function main() {
    check_argument
    create_output_dir
    start_analysis_clippings
}

main
